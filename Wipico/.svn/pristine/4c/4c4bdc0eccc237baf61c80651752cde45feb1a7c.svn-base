package com.chinasvc.wipico.client;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;

import com.chinasvc.wipico.type.Control;

/**
 * 控制操作类
 * 
 * @since 1.0.0
 * */
public class ControlSender {

	/** 端口号 */
	public static int destPort = 34342;

	/**
	 * 发送数据
	 * 
	 * @param data
	 *                要发送的数据
	 * @param ip
	 *                发往的IP
	 * */
	protected static void sendData(byte data[], String ip) {
		InetAddress destIPAddress;
		try {
			destIPAddress = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			e.printStackTrace();
			destIPAddress = null;
			return;
		}
		DatagramPacket sendPacket = new DatagramPacket(data, data.length, destIPAddress, destPort);
		DatagramSocket sendSocket = null;
		try {
			sendSocket = new DatagramSocket();
			sendSocket.setSoTimeout(2000);
			sendSocket.send(sendPacket);
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (SocketTimeoutException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (sendSocket != null) {
			sendSocket.close();
		}
	}

	/**
	 * 发送键码，非主线程中调用
	 * 
	 * @param mkeycode
	 *                要发送的键码
	 * @param ip
	 *                发往的IP
	 * */
	protected static void sendKey(int mkeycode, String ip) {
		ByteArrayOutputStream bos = null;
		DataOutputStream oos = null;
		if (ip == null) {
			return;
		}
		try {
			bos = new ByteArrayOutputStream(64);
			oos = new DataOutputStream(bos);
			oos.writeInt(Control.CONTROL_KEY);
			oos.writeInt(Control.ANDKEY_DOWN);
			oos.writeInt(mkeycode);
			oos.flush();
			sendData(bos.toByteArray(), ip);
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

		}
	}

	/**
	 * 发送鼠标事件类型，非主线程中调用
	 * 
	 * @param eventType
	 *                要发送的键码类型
	 * @param x
	 *                要发送的x坐标
	 * @param y
	 *                要发送的y坐标
	 * @param ip
	 *                发往的IP
	 * */
	protected static void sendMouse(int eventType, int x, int y, String ip) {
		ByteArrayOutputStream bos = null;
		DataOutputStream oos = null;
		if (ip == null) {
			return;
		}
		try {
			bos = new ByteArrayOutputStream(64);
			oos = new DataOutputStream(bos);
			oos.writeInt(Control.CONTROL_MOUSE);
			oos.writeInt(eventType);
			oos.writeInt(x);
			oos.writeInt(y);
			oos.flush();
			sendData(bos.toByteArray(), ip);
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
		}
	}

	/**
	 * 发送触碰类型事件，非主线程中调用
	 * 
	 * @param act
	 *                要发送的触碰类型
	 * @param pointsseqid
	 *                event.getPointerCount();触碰的点数
	 * 
	 * @param data
	 *                data[i][0] x，触碰点的x坐标；
	 * 
	 *                data[i][1] y，触碰点的Y坐标；
	 * 
	 *                data[i][2]event.getPointerId(i),事件指针标识符关联到一个特定的指针数据索引。
	 * 
	 *                data[i][3] PointerCoords.touchMajor,椭圆接触区主轴的长度
	 * @param ip
	 *                发往的IP
	 * */
	protected static void sendTouch(int act, int pointsseqid, int[][] data, String ip) {
		ByteArrayOutputStream bos = null;
		DataOutputStream oos = null;
		int points = pointsseqid & 0xff;
		if (ip == null) {
			return;
		}
		try {
			bos = new ByteArrayOutputStream(256);
			oos = new DataOutputStream(bos);
			oos.writeInt(Control.CONTROL_TOUCH);
			oos.writeInt(act);
			oos.writeInt(pointsseqid >> 8);
			oos.writeInt(points);
			for (int i = 0; i < points; i++) {
				oos.writeInt(data[i][0]);
				oos.writeInt(data[i][1]);
				oos.writeInt(data[i][2]);
				oos.writeInt(data[i][3]);
			}
			oos.flush();
			sendData(bos.toByteArray(), ip);
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
		}
	}
}
