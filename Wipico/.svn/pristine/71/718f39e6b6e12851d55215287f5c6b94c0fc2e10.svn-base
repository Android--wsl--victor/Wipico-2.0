package com.chinasvc.wipico.player;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;

import android.util.Log;

/**
 * 客户端多媒体同步类
 * 
 * @since 1.0.0
 * */
public class SyncPlayClient {

	private String TAG = "SyncPlayClient";
	private boolean isDebug = true;

	private int currentMedia = 0;

	private ImageSyncListener mImageSyncListener;

	private AudioSyncListener mAudioSyncListener;

	private VideoSyncListener mVideoSyncListener;

	private MediaSyncThread mediaSyncThread;

	/**
	 * 获取当前播放类型，0为没有播放，1为图片，2为音乐，3为视频
	 * */
	public int getMediaType() {
		return currentMedia;
	}

	/**
	 * 开启音频同步
	 * */
	public void startSync() {
		if (mediaSyncThread != null) {
			mediaSyncThread.stopSync();
			mediaSyncThread = null;
		}
		mediaSyncThread = new MediaSyncThread();
		mediaSyncThread.startSync();
	}

	/**
	 * 关闭音频同步
	 * */
	public void stopSync() {
		if (mediaSyncThread != null) {
			mediaSyncThread.stopSync();
			mediaSyncThread = null;
		}
	}

	/**
	 * 多媒体同步线程
	 * */
	private class MediaSyncThread extends Thread {

		private boolean isRuning = true;
		private DatagramSocket datagramSocket;

		@Override
		public void run() {
			// TODO Auto-generated method stub
			byte[] message = new byte[1024];
			try {
				if (datagramSocket == null) {
					datagramSocket = new DatagramSocket(null);
					datagramSocket.setReuseAddress(true);
					datagramSocket.bind(new InetSocketAddress(PlayerConstant.MEDIA_UDP_PORT));
					datagramSocket.setSoTimeout(1000);
				}

				DatagramPacket datagramPacket = new DatagramPacket(message, message.length);
				while (isRuning) {
					try {
						if (!datagramSocket.isClosed()) {
							datagramSocket.receive(datagramPacket);
							update(datagramPacket.getData());
						}
					} catch (SocketTimeoutException e) {
						if (isDebug)
							Log.i(TAG, "同步读取超时");
						currentMedia = 0;
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (!datagramSocket.isClosed()) {
					datagramSocket.close();
				}
			} catch (SocketException e) {
				e.printStackTrace();
			}
		}

		private void update(byte[] data) {
			try {
				DataInputStream is = null;
				is = new DataInputStream(new ByteArrayInputStream(data));
				int flag, progress, duration, status, isSilent;
				flag = is.readInt();// 1为图片，2为音乐，3为视频
				progress = is.readInt();// 当前进度
				duration = is.readInt();// 总时长
				status = is.readInt();// 播放状态，1为正在播放，-1为播放结束
				isSilent = is.readInt();// 播放状态，1为正在播放，-1为播放结束
				currentMedia = flag;
				switch (currentMedia) {
				case PlayerConstant.PLAY_IMAGE:
					if (mImageSyncListener != null) {
						mImageSyncListener.syncPlay();
					}
					break;
				case PlayerConstant.PLAY_MUSIC:
					if (mAudioSyncListener != null) {
						mAudioSyncListener.syncPlay(progress, duration, status, int2boolean(isSilent));
					}
					break;
				case PlayerConstant.PLAY_VIDEO:
					if (mVideoSyncListener != null) {
						mVideoSyncListener.syncPlay(progress, duration, status, int2boolean(isSilent));
					}
					break;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		private boolean int2boolean(int value) {
			if (value == 1) {
				return true;
			} else {
				return false;
			}
		}

		public void stopSync() {
			isRuning = false;
			try {
				join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if (datagramSocket != null && !datagramSocket.isClosed()) {
				datagramSocket.close();
			}
		}

		public void startSync() {
			isRuning = true;
			start();
		}
	}

	/**
	 * 图片同步监听器
	 * */
	public interface ImageSyncListener {
		/**
		 * 同步播放
		 * */
		public void syncPlay();
	}

	/**
	 * 音频同步监听器
	 * */
	public interface AudioSyncListener {
		/**
		 * 同步播放
		 * 
		 * @param progress
		 *                当前进度条
		 * @param duration
		 *                当前播放的总的长度
		 * @param status
		 *                播放状态
		 * @param status
		 *                是否静音
		 * */
		public void syncPlay(int progress, int duration, int status, boolean isSilent);
	}

	/**
	 * 视频同步监听器
	 * */
	public interface VideoSyncListener {
		/**
		 * 同步播放
		 * 
		 * @param progress
		 *                当前进度条
		 * @param duration
		 *                当前播放的总的长度
		 * @param status
		 *                播放状态
		 * @param status
		 *                是否静音
		 * */
		public void syncPlay(int progress, int duration, int status, boolean isSilent);
	}

	/**
	 * 设置图片同步监听器
	 * 
	 * @param imageAsyncListener
	 *                图片同步监听器
	 * */
	public void setOnImageAsyncListener(ImageSyncListener imageSyncListener) {
		this.mImageSyncListener = imageSyncListener;
	}

	/**
	 * 设置视频同步监听器
	 * 
	 * @param imageAsyncListener
	 *                视频同步监听器
	 * */
	public void setOnVideoAsyncListener(VideoSyncListener videoSyncListener) {
		this.mVideoSyncListener = videoSyncListener;
	}

	/**
	 * 设置音频同步监听器
	 * 
	 * @param imageAsyncListener
	 *                音频同步监听器
	 * */
	public void setOnAudioSyncListener(AudioSyncListener audioSyncListener) {
		this.mAudioSyncListener = audioSyncListener;
	}

}
