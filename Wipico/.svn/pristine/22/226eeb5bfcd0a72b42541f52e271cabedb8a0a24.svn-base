package com.chinasvc.wipico.file;

import java.io.IOException;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.io.CopyStreamEvent;
import org.apache.commons.net.io.CopyStreamListener;

import com.chinasvc.wipico.bean.Device;

import android.util.Log;

/**
 * Wipico 文件管理客户端
 * 
 * @since 1.0.0
 * */
public class WipicoFileClient {

	private String TAG = "WipicoFileClient";

	private FTPClient ftpClient;

	private String server;
	private int port;
	private String userName;
	private String userPassword;

	public static long currentSize = 0;

	private FileExceptionListener exceptionListener;

	private final static String FILE_USER_NAME = "csvc";
	private final static String FILE_PASSWORD = "admin";
	private final static int FILE_PORT = 32221;

	/**
	 * 构造方法
	 * 
	 * @param device
	 *                所连接的设备
	 * */
	public WipicoFileClient(Device device) {
		this.server = device.getDeviceIp();
		this.port = FILE_PORT;
		this.userName = FILE_USER_NAME;
		this.userPassword = FILE_PASSWORD;
		ftpClient = new FTPClient();
	}

	/**
	 * 判断是否连接
	 * */
	public boolean isConnect() {
		if (ftpClient != null && ftpClient.isConnected()) {
			int reply;
			reply = ftpClient.getReplyCode();
			if (!FTPReply.isPositiveCompletion(reply)) {
				Log.e(TAG, "否定的应答>>>>");
				return false;
			} else {
				return true;
			}
		} else {
			ftpClient = new FTPClient();
			return false;
		}
	}

	/**
	 * 链接文件服务服务器
	 * 
	 * @return 是否连接成功
	 */
	public boolean connect() {
		if (isConnect()) {
			// 已经连接,不用再连接
			return true;
		}
		try {
			int reply;
			if (port > 0) {
				ftpClient.connect(server, port);
			} else {
				// 默认端口号
				ftpClient.connect(server);
			}
			ftpClient.login(userName, userPassword);// 登录
			ftpClient.enterLocalPassiveMode();// 被动模式
			ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
			ftpClient.setControlEncoding("UTF-8");
			ftpClient.setBufferSize(1024 * 1024);

			ftpClient.setCopyStreamListener(new CopyStreamListener() {
				@Override
				public void bytesTransferred(long arg0, int arg1, long arg2) {
					currentSize += arg1;
				}

				@Override
				public void bytesTransferred(CopyStreamEvent arg0) {
					// TODO Auto-generated method stub
				}
			});

			reply = ftpClient.getReplyCode();
			if (!FTPReply.isPositiveCompletion(reply)) {
				ftpClient.disconnect();
				// 服务器拒绝访问
				// System.err.println("FTP server refused connection.");
				if (exceptionListener != null) {
					exceptionListener.refused();
				}
				ftpClient = null;
				return false;
			} else {
				return true;
			}
		} catch (IOException e) {
			if (ftpClient.isConnected()) {
				try {
					ftpClient.disconnect();
				} catch (IOException f) {
					// do nothing
				}
			}
			// System.err.println("Could not connect to server.");
			if (exceptionListener != null) {
				exceptionListener.exception();
			}
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 关闭连接
	 */
	public void disconnect() {
		try {
			if (ftpClient != null && ftpClient.isConnected())
				ftpClient.logout();
			ftpClient.disconnect();
			ftpClient = null;
		} catch (Exception e) {
			e.printStackTrace();
			if (exceptionListener != null) {
				exceptionListener.exception();
			}
		}
	}

	/**
	 * 设置异常监听接口
	 * */
	public void setFileExceptionListener(FileExceptionListener exceptionListener) {
		this.exceptionListener = exceptionListener;
	}

	/**
	 * 文件管理服务连接异常接口
	 * */
	public interface FileExceptionListener {
		public void exception();

		public void refused();
	}

}
