package com.chinasvc.wipico.client;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import com.chinasvc.wipico.bean.Device;

import android.util.Log;

/**
 * 扫描设备线程类
 * 
 * @since 1.0.0
 * */
public class Discovery extends Thread {

	private boolean isDebug = true;
	private String TAG = "Discovery";

	/** 扫描设备的端口号 */
	private final static int SCANNING_EQUIPMENT_PORT = 34341;
	private final static String DISCOVERY_REQ = "pico:requ";
	private final static String DISCOVERY_RESP = "pico:live";

	private DatagramSocket sendSocket;
	private DatagramPacket sendPacket;
	private DatagramPacket recePacket;
	private InetAddress destIPAddress;

	private List<Device> listDevices = new ArrayList<Device>();

	private boolean running = true;
	private boolean isSend;
	private int receive;// 最大接收数量

	private byte[] recedata = new byte[50];

	private ScanListener mScanListener;

	/**
	 * 构造方法
	 * 
	 * @param ip
	 *                广播地址
	 * */
	public Discovery(String ip) {
		listDevices = new ArrayList<Device>();
		try {
			this.destIPAddress = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		if (destIPAddress != null) {
			sendPacket = new DatagramPacket(DISCOVERY_REQ.getBytes(), DISCOVERY_REQ.getBytes().length, destIPAddress, SCANNING_EQUIPMENT_PORT);
			recePacket = new DatagramPacket(recedata, recedata.length, destIPAddress, SCANNING_EQUIPMENT_PORT);
		}
	}

	/**
	 * 初始化线程类
	 * 
	 * @param ip
	 *                广播地址
	 * */
	public void initialization(String ip) {
		listDevices = new ArrayList<Device>();
		try {
			this.destIPAddress = InetAddress.getByName(ip);
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		if (destIPAddress != null) {
			sendPacket = new DatagramPacket(DISCOVERY_REQ.getBytes(), DISCOVERY_REQ.getBytes().length, destIPAddress, SCANNING_EQUIPMENT_PORT);
			recePacket = new DatagramPacket(recedata, recedata.length, destIPAddress, SCANNING_EQUIPMENT_PORT);
		}
	}

	/**
	 * 关闭扫描设备
	 * */
	public void closeScan() {
		try {
			if (isDebug)
				Log.i(TAG, "关闭扫描" + Thread.currentThread());
			running = false;
			join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 开始扫描设备
	 * */
	public void startScan() {
		if (isDebug)
			Log.i(TAG, "开始扫描" + Thread.currentThread());
		running = true;
		setDaemon(true);
		start();
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while (running) {
			if (isDebug)
				Log.i(TAG, "5s扫描设备>>>>>>>>>>>>" + Thread.currentThread());
			receive = 50;// 最大接收数量
			isSend = false;
			String recestr = null;
			try {
				listDevices.clear();
				sendSocket = new DatagramSocket();
				sendSocket.setBroadcast(true);
				sendSocket.setSoTimeout(3000);
				sendSocket.send(sendPacket);
				while (receive-- > 0) {
					sendSocket.receive(recePacket);
					recestr = new String(recedata, recePacket.getOffset(), recePacket.getLength());
					if (recestr.startsWith(DISCOVERY_RESP)) {
						Device device = new Device();
						device.setDeviceName(recestr.substring(9));
						device.setDeviceIp(recePacket.getAddress().getHostAddress());
						if (listDevices.indexOf(device) < 0) {
							listDevices.add(device);
							if (device.getDeviceIp().equals("10.8.8.1")) {
								isSend = true;
								if (isDebug)
									Log.i(TAG, "扫描到10.8.8.1" + listDevices + "|" + Thread.currentThread());
								sendResult();
								break;
							}
						}
					}
				}
			} catch (SocketTimeoutException e) {
				if (isDebug)
					Log.i(TAG, "扫描3s超时" + listDevices + "|" + Thread.currentThread());
				if (!isSend) {
					sendResult();
				}
			} catch (SocketException e) {
				receive = 0;
				if (isDebug)
					Log.i(TAG, "SocketException>>>>>>" + Thread.currentThread());
				if (mScanListener != null) {
					mScanListener.scanException();
				}
			} catch (IOException e) {
				receive = 0;
				if (isDebug)
					Log.i(TAG, "SocketException>>>>>>" + Thread.currentThread());
				if (mScanListener != null) {
					mScanListener.scanException();
				}
			}
			sendSocket.close();
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 扫描监听接口
	 * */
	public interface ScanListener {

		/**
		 * 无可用信号
		 * */
		public void  isNetworkAvailable(boolean isAvailable);

		/**
		 * 扫描设备异常，非主线程中操作
		 * */
		public void scanException();

		/**
		 * 扫描结果返回，在非主线程中操作
		 * 
		 * @param listDevices
		 *                扫描结果列表
		 * */
		public void onResult(List<Device> listDevices);
	}

	/**
	 * 设置扫描监听接口
	 * */
	public void setOnScanListener(ScanListener scanListener) {
		this.mScanListener = scanListener;
	}

	private void sendResult() {
		if (mScanListener != null) {
			mScanListener.onResult(listDevices);
		}
	}

}
