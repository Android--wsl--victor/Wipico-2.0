package com.chinasvc.wipicophone.service;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.json.JSONException;
import org.json.JSONObject;

import com.chinasvc.wipicophone.WipicoApplication;

/**
 * 文本消息收发器
 * 
 */
public class UDPMessageListener extends UDPListener {

	private String TAG = "UDPMessageListener";

	// 文本消息监听端口
	private final int port = Config.MESSAGE_PORT;
	private final int BUFFER_SIZE = 1024 * 3;// 3k的数据缓冲区

	private OnUDPReceiveMessage onReceiveMessage;

	// 保存当前在线用户，键值为用户的ip
	final Map<String, User> users;
	// 保存用户发的消息，每个ip都会开启一个消息队列来缓存消息
	final Map<String, Queue<UDPMessage>> messages;

	private static UDPMessageListener instance;

	private UDPMessageListener(Map<String, User> users, Map<String, Queue<UDPMessage>> messages) {
		this.users = users;
		this.messages = messages;
	}

	public static UDPMessageListener getInstance(Map<String, User> users, Map<String, Queue<UDPMessage>> messages) {
		return instance == null ? instance = new UDPMessageListener(users, messages) : instance;
	}

	@Override
	void init() {
		setPort(port);
		setBufferSize(BUFFER_SIZE);
	}

	@Override
	public void onReceive(byte[] data, DatagramPacket packet) {
		try {
			String temp = new String(data, 0, packet.getLength(), Config.ENCOD);// 得到接收的消息
			UDPMessage msg = new UDPMessage(new JSONObject(temp));
			String sourceIp = packet.getAddress().getHostAddress();// 对方ip
			int type = msg.getType();
			switch (type) {
			case ADD_USER:// 增加一个用户
				User user = new User();
				user.setIp(sourceIp);
				user.setUserName(msg.getSenderName());
				user.setDeviceCode(msg.getDeviceCode());
				// 构造回送报文内容，反馈回一个消息
				if (!WipicoApplication.appInstance.getLocalIp().equals(user.getIp())) {
					users.put(sourceIp, user);
					send(WipicoApplication.appInstance.getMyUdpMessage("", LOGIN_SUCC).toString(), packet.getAddress());// 通知对方验证成功
					if (onReceiveMessage != null)
						onReceiveMessage.onReceive(type);
				}
				break;
			case LOGIN_SUCC:// 在对方登陆成功后返回的验证消息，将对方的用户信息存入用户列表
				user = new User();
				user.setIp(sourceIp);
				user.setUserName(msg.getSenderName());
				user.setDeviceCode(msg.getDeviceCode());
				users.put(sourceIp, user);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type);
				break;
			case REMOVE_USER:// 删除用户
				users.remove(sourceIp);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type);
				break;
			case ASK_VIDEO:// 请求视频聊天
				break;
			case REPLAY_VIDEO_ALLOW:// 允许视频聊天
				break;
			case REPLAY_VIDEO_NOT_ALLOW:// 拒绝视频聊天
				break;
			case REPLAY_SEND_FILE:// 回复文件传输邀请
				msg.setIp(sourceIp);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type, msg);
				break;
			case ASK_SEND_FILE:// 收到文件传输邀请
				msg.setIp(sourceIp);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type, msg);
				break;
			case RECEIVE_MSG:// 接收到消息
				if (messages.containsKey(sourceIp)) {
					messages.get(sourceIp).add(msg);// 更新现有
				} else {
					Queue<UDPMessage> queue = new ConcurrentLinkedQueue<UDPMessage>();
					queue.add(msg);
					messages.put(sourceIp, queue);// 新增
				}
				break;
			case TO_ALL_MESSAGE:// message to all
				if (messages.containsKey(Config.ALL_ADDRESS)) {
					messages.get(Config.ALL_ADDRESS).add(msg);// 更新现有
				} else {
					Queue<UDPMessage> queue = new ConcurrentLinkedQueue<UDPMessage>();
					queue.add(msg);
					messages.put(Config.ALL_ADDRESS, queue);// 新增
				}
				break;
			case HEART_BEAT:// 心跳包检测
				send(WipicoApplication.appInstance.getMyUdpMessage("", HEART_BEAT_REPLY).toString(), packet.getAddress());// 回复心跳包
				user = users.get(sourceIp);
				if (user != null) {
					user.setHeartTime(System.currentTimeMillis() + "");
				}
				break;
			case HEART_BEAT_REPLY:// 接收到心跳包
				user = users.get(sourceIp);
				if (user != null)
					user.setHeartTime(System.currentTimeMillis() + "");// 更新心跳包的最后时间
				break;
			case REQUIRE_ICON:// 请求头像
				// File file = new
				// File(WipicoApplication.iconPath +
				// Constant.iconName);
				// if (file.exists()) {
				// TCPFileListener listener =
				// TCPFileListener.getInstance();
				// if (!listener.isRunning()) {
				// try {
				// listener.open();
				// } catch (IOException e) {
				// e.printStackTrace();
				// }
				// }
				// listener.sendFile(sourceIp, file,
				// WipicoApplication.iconPath,
				// WipicoApplication.appInstance.getDeviceCode());
				// }
				break;
			case CANCEL_RECEIVE_FILE:// 取消文件传输
				msg.setIp(sourceIp);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type, msg);
				break;
			case CANCEL_SEND_FILE:// 取消文件传输
				msg.setIp(sourceIp);
				if (onReceiveMessage != null)
					onReceiveMessage.onReceive(type, msg);
				break;
			}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	@Override
	void noticeOffline() {
		try {
			send(WipicoApplication.appInstance.getMyUdpMessage("", REMOVE_USER).toString(), InetAddress.getByName(Config.ALL_ADDRESS));
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void noticeOnline() {
		try {
			send(WipicoApplication.appInstance.getMyUdpMessage("", ADD_USER).toString(), InetAddress.getByName(Config.ALL_ADDRESS));
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 发送UDP数据包
	 * 
	 * @param msg
	 *                消息
	 * @param destIp
	 *                目标地址
	 * @param destPort
	 *                目标端口
	 * @throws IOException
	 */
	public void send(String msg, InetAddress destIp) {
		send(msg, destIp, Config.MESSAGE_PORT);
	}

	public OnUDPReceiveMessage getOnReceiveMessage() {
		return onReceiveMessage;
	}

	public void setOnReceiveMessage(OnUDPReceiveMessage onReceiveMessage) {
		this.onReceiveMessage = onReceiveMessage;
	}

	@Override
	public void close() throws IOException {
		super.close();
		// 这个一定要置空，不然会出现already
		// start的bug,因为instance是static的，程序退出后，当前dvm还在，还是会保持对原有变量的引用
		instance = null;
		if (users != null)
			users.clear();
		if (messages != null)
			messages.clear();
	}

	@Override
	void sendMsgFailure() {
		if (onReceiveMessage != null)
			onReceiveMessage.sendFailure();
	}

}
